import asyncio
from datetime import datetime
from typing import Optional
from aiogram import Bot
from config import BOT_TOKEN

class TelegramLogger:
    def __init__(self, chat_id: int = -4948669471):
        self.chat_id = chat_id
        self.bot = Bot(token=BOT_TOKEN)
    
    async def log_user_action(self, user_id: int, username: Optional[str], 
                            first_name: Optional[str], action: str, 
                            additional_info: str = "") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""
üÜî –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
‚Ä¢ ID: {user_id}
‚Ä¢ Username: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚ö° –î–µ–π—Å—Ç–≤–∏–µ: {action}
üïê –í—Ä–µ–º—è: {timestamp}

{additional_info}
            """.strip()
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def log_bot_start(self) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            message = f"""
üöÄ **–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!**

üÜî **Bot ID:** 8164568741
üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** FRESH STYLE RUSSIA
üïê **–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:** {timestamp}
üåê **WebApp URL:** https://FSR.agensy/

‚úÖ **–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**
            """.strip()
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞: {e}")
    
    async def log_database_action(self, user_id: int, action: str, 
                                success: bool, details: str = "") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
            
            message = f"""
üóÑÔ∏è **–î–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:** `{user_id}`
‚ö° **–î–µ–π—Å—Ç–≤–∏–µ:** {action}
üìä **–°—Ç–∞—Ç—É—Å:** {status}
üïê **–í—Ä–µ–º—è:** {timestamp}

üìù **–î–µ—Ç–∞–ª–∏:** {details}
            """.strip()
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
    
    async def log_error(self, error: str, context: str = "") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        try:
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            message = f"""
‚ö†Ô∏è **–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ**

‚ùå **–û—à–∏–±–∫–∞:** {error}
üìã **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {context}
üïê **–í—Ä–µ–º—è:** {timestamp}
            """.strip()
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏: {e}")
    
    async def log_statistics(self, stats: dict) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FSR Bot**

üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {stats.get('total_users', 0)}
‚úÖ **–ó–∞–≤–µ—Ä—à–∏–ª–∏ –≥–∏–≤–µ–≤–µ–π:** {stats.get('completed_giveaway', 0)}
üî• **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π:** {stats.get('active_users_7d', 0)}
üïê **–í—Ä–µ–º—è:** {timestamp}
            """.strip()
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def log_friend_invitation(self, inviter_id: int, inviter_name: str, 
                                  invitee_id: int, invitee_name: str, referral_code: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞"""
        try:
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            message = f"""
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞!

üéØ –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π:
‚Ä¢ ID: {inviter_id}
‚Ä¢ –ò–º—è: {inviter_name}

üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π:
‚Ä¢ ID: {invitee_id}
‚Ä¢ –ò–º—è: {invitee_name}

üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}

üéÅ –ë–æ–Ω—É—Å—ã:
‚Ä¢ +100 XP –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
‚Ä¢ +100 XP –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É

üïê –í—Ä–µ–º—è: {timestamp}
            """.strip()
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
    
    async def log_task_completion(self, user_id: int, username: str, 
                                first_name: str, task_name: str, 
                                task_number: int) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        try:
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            message = f"""
‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
‚Ä¢ ID: {user_id}
‚Ä¢ Username: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è: {first_name}

üìã –ó–∞–¥–∞–Ω–∏–µ: {task_name}
üî¢ –ù–æ–º–µ—Ä: {task_number}/2

üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å: {task_number}/2 –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

üïê –í—Ä–µ–º—è: {timestamp}
            """.strip()
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
    
    async def log_giveaway_completion(self, user_id: int, username: str, 
                                    first_name: str, total_xp: int) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–∏–≤–µ–≤–µ—è"""
        try:
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            message = f"""
üèÜ –ì–∏–≤–µ–≤–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
‚Ä¢ ID: {user_id}
‚Ä¢ Username: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è: {first_name}

üéÅ –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚úÖ
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ XP: {total_xp}
‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤!

üéØ –ü—Ä–∏–∑—ã:
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ ZARA - 20,000‚ÇΩ
‚Ä¢ –ë—å—é—Ç–∏-—É—Å–ª—É–≥–∏ - 100,000‚ÇΩ  
‚Ä¢ VIP-—Å—Ç–∞—Ç—É—Å - 50,000‚ÇΩ

üïê –í—Ä–µ–º—è: {timestamp}
            """.strip()
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–∏–≤–µ–≤–µ—è: {e}")
    
    async def log_referral_stats(self, user_id: int, username: str, 
                               first_name: str, referral_count: int, 
                               total_xp: int) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            message = f"""
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
‚Ä¢ ID: {user_id}
‚Ä¢ Username: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è: {first_name}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referral_count}
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ XP: {total_xp}

üéÅ –ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:
‚Ä¢ +100 XP –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ –®–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã

üïê –í—Ä–µ–º—è: {timestamp}
            """.strip()
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def log_folder_subscription(self, user_id: int, username: str, 
                                    first_name: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–∞–ø–∫—É —Å –∫–∞–Ω–∞–ª–∞–º–∏"""
        try:
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            message = f"""
üìÅ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–ø–∫—É —Å –∫–∞–Ω–∞–ª–∞–º–∏!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
‚Ä¢ ID: {user_id}
‚Ä¢ Username: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è: {first_name}

üéØ –î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ Telegram-–ø–∞–ø–∫—É
üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: 10 –∫–∞–Ω–∞–ª–æ–≤ Fresh Style Russia
üéÅ –ë–æ–Ω—É—Å: +1000 XP –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É

üïê –í—Ä–µ–º—è: {timestamp}
            """.strip()
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–∞–ø–∫—É: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
        await self.bot.session.close()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
telegram_logger = TelegramLogger() 