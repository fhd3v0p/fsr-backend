#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ FSR —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: API —Å–µ—Ä–≤–µ—Ä, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, nginx, –±–æ—Ç–∞
"""

import os
import sys
import sqlite3
import requests
import subprocess
import json
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/telegram_bot/health_check.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FSRHealthChecker:
    def __init__(self):
        self.base_dir = '/root/telegram_bot'
        self.db_path = os.path.join(self.base_dir, 'users.db')
        self.api_url = 'https://fsr.agency'
        self.results = {}
        
    def check_system_services(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        services = {
            'fsr-api': 'FSR API Server',
            'nginx': 'Nginx Web Server',
            'fsr-bot': 'FSR Telegram Bot'
        }
        
        for service, name in services.items():
            try:
                result = subprocess.run(
                    ['systemctl', 'is-active', service],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if result.returncode == 0 and result.stdout.strip() == 'active':
                    self.results[f'{service}_status'] = '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'
                    logger.info(f"‚úÖ {name}: –ê–∫—Ç–∏–≤–µ–Ω")
                else:
                    self.results[f'{service}_status'] = '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'
                    logger.error(f"‚ùå {name}: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
                    
            except Exception as e:
                self.results[f'{service}_status'] = f'‚ùå –û—à–∏–±–∫–∞: {str(e)}'
                logger.error(f"‚ùå {name}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
    
    def check_database_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
            if not os.path.exists(self.db_path):
                self.results['database_file'] = '‚ùå –§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω'
                logger.error("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            self.results['database_file'] = '‚úÖ –§–∞–π–ª –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = [row[0] for row in cursor.fetchall()]
            
            required_tables = ['users', 'photo_uploads']
            missing_tables = []
            
            for table in required_tables:
                if table in tables:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                    cursor.execute(f"PRAGMA table_info({table});")
                    columns = cursor.fetchall()
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")
                else:
                    missing_tables.append(table)
                    logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            if missing_tables:
                self.results['database_tables'] = f'‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {", ".join(missing_tables)}'
            else:
                self.results['database_tables'] = '‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM users;")
            user_count = cursor.fetchone()[0]
            self.results['user_count'] = f'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}'
            
            cursor.execute("SELECT COUNT(*) FROM photo_uploads;")
            photo_count = cursor.fetchone()[0]
            self.results['photo_count'] = f'üì∏ –§–æ—Ç–æ: {photo_count}'
            
            conn.close()
            self.results['database_connection'] = '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ'
            
        except Exception as e:
            self.results['database_connection'] = f'‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(e)}'
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
    
    def check_api_endpoints(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"""
        logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...")
        
        endpoints = [
            ('/health', 'Health Check'),
            ('/api/stats', 'API Stats'),
        ]
        
        for endpoint, name in endpoints:
            try:
                response = requests.get(f"{self.api_url}{endpoint}", timeout=10)
                
                if response.status_code == 200:
                    self.results[f'api_{endpoint.replace("/", "_")}'] = f'‚úÖ {name}: OK'
                    logger.info(f"‚úÖ {name}: {response.status_code}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –æ—Ç–≤–µ—Ç
                    try:
                        data = response.json()
                        if endpoint == '/api/stats':
                            stats = data.get('stats', {})
                            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
                    except json.JSONDecodeError:
                        logger.warning(f"‚ö†Ô∏è {name}: –ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç–≤–µ—Ç")
                        
                else:
                    self.results[f'api_{endpoint.replace("/", "_")}'] = f'‚ùå {name}: {response.status_code}'
                    logger.error(f"‚ùå {name}: {response.status_code}")
                    
            except requests.exceptions.RequestException as e:
                self.results[f'api_{endpoint.replace("/", "_")}'] = f'‚ùå {name}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
                logger.error(f"‚ùå {name}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
    
    def check_nginx_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx"""
        logger.info("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx...")
        
        try:
            result = subprocess.run(
                ['nginx', '-t'],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                self.results['nginx_config'] = '‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞'
                logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                self.results['nginx_config'] = f'‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx: {result.stderr}'
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx: {result.stderr}")
                
        except Exception as e:
            self.results['nginx_config'] = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ nginx: {str(e)}'
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ nginx: {e}")
    
    def check_ssl_certificates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
        logger.info("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
        
        try:
            response = requests.get(f"{self.api_url}/health", timeout=10, verify=True)
            
            if response.status_code == 200:
                self.results['ssl_certificate'] = '‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'
                logger.info("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            else:
                self.results['ssl_certificate'] = f'‚ùå SSL –æ—à–∏–±–∫–∞: {response.status_code}'
                logger.error(f"‚ùå SSL –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except requests.exceptions.SSLError as e:
            self.results['ssl_certificate'] = f'‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {str(e)}'
            logger.error(f"‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {e}")
        except Exception as e:
            self.results['ssl_certificate'] = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL: {str(e)}'
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL: {e}")
    
    def check_python_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        required_packages = [
            'flask',
            'flask-cors',
            'aiogram',
            'python-dotenv',
            'aiohttp'
        ]
        
        missing_packages = []
        
        for package in required_packages:
            try:
                __import__(package.replace('-', '_'))
                logger.info(f"‚úÖ {package}: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except ImportError:
                missing_packages.append(package)
                logger.error(f"‚ùå {package}: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if missing_packages:
            self.results['python_dependencies'] = f'‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {", ".join(missing_packages)}'
        else:
            self.results['python_dependencies'] = '‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'
    
    def check_file_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
        logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
        
        critical_files = [
            self.db_path,
            os.path.join(self.base_dir, 'api_server.py'),
            os.path.join(self.base_dir, 'bot.py'),
            os.path.join(self.base_dir, 'config.py'),
            os.path.join(self.base_dir, '.env')
        ]
        
        for file_path in critical_files:
            if os.path.exists(file_path):
                if os.access(file_path, os.R_OK):
                    logger.info(f"‚úÖ {os.path.basename(file_path)}: –ß—Ç–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
                else:
                    logger.error(f"‚ùå {os.path.basename(file_path)}: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ")
            else:
                logger.error(f"‚ùå {os.path.basename(file_path)}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def check_memory_usage(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        logger.info("üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        try:
            with open('/proc/meminfo', 'r') as f:
                lines = f.readlines()
                
            mem_info = {}
            for line in lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    mem_info[key.strip()] = int(value.split()[0])
            
            total_mb = mem_info.get('MemTotal', 0) // 1024
            available_mb = mem_info.get('MemAvailable', 0) // 1024
            used_mb = total_mb - available_mb
            usage_percent = (used_mb / total_mb) * 100 if total_mb > 0 else 0
            
            self.results['memory_usage'] = f'üíæ –ü–∞–º—è—Ç—å: {used_mb}MB/{total_mb}MB ({usage_percent:.1f}%)'
            logger.info(f"üíæ –ü–∞–º—è—Ç—å: {used_mb}MB/{total_mb}MB ({usage_percent:.1f}%)")
            
            if usage_percent > 90:
                logger.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    def check_disk_space(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
        logger.info("üíø –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞...")
        
        try:
            result = subprocess.run(
                ['df', '-h', '/'],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                if len(lines) > 1:
                    parts = lines[1].split()
                    if len(parts) >= 5:
                        usage = parts[4]
                        self.results['disk_usage'] = f'üíø –î–∏—Å–∫: {usage} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ'
                        logger.info(f"üíø –î–∏—Å–∫: {usage} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        usage_percent = int(usage.rstrip('%'))
                        if usage_percent > 90:
                            logger.warning("‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ!")
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞: {e}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        report = f"""
üîç –û–¢–ß–ï–¢ –ü–†–û–í–ï–†–ö–ò FSR –°–ò–°–¢–ï–ú–´
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{'='*50}

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:
"""
        
        for key, value in self.results.items():
            report += f"{value}\n"
        
        report += f"""
{'='*50}

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        issues = [k for k, v in self.results.items() if '‚ùå' in v or '‚ö†Ô∏è' in v]
        
        if not issues:
            report += "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n"
        else:
            report += f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º:\n"
            for issue in issues:
                report += f"  - {self.results[issue]}\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_path = os.path.join(self.base_dir, 'health_report.txt')
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        logger.info(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")
        print(report)
        
        return len(issues) == 0
    
    def run_full_check(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ FSR —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            self.check_system_services()
            self.check_database_integrity()
            self.check_api_endpoints()
            self.check_nginx_config()
            self.check_ssl_certificates()
            self.check_python_dependencies()
            self.check_file_permissions()
            self.check_memory_usage()
            self.check_disk_space()
            
            is_healthy = self.generate_report()
            
            if is_healthy:
                logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤–∞!")
                return 0
            else:
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return 1
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return 2

def main():
    checker = FSRHealthChecker()
    exit_code = checker.run_full_check()
    sys.exit(exit_code)

if __name__ == "__main__":
    main() 