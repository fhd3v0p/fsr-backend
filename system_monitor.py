#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ FSR —Å–∏—Å—Ç–µ–º—ã
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ cron –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
"""

import os
import sys
import time
import subprocess
import logging
from datetime import datetime, timedelta
import sqlite3
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/telegram_bot/system_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FSRSystemMonitor:
    def __init__(self):
        self.base_dir = '/root/telegram_bot'
        self.db_path = os.path.join(self.base_dir, 'users.db')
        self.api_url = 'https://fsr.agency'
        self.services = ['fsr-api', 'fsr-bot', 'nginx']
        self.last_restart_file = os.path.join(self.base_dir, 'last_restart.txt')
        
    def check_service_status(self, service_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            result = subprocess.run(
                ['systemctl', 'is-active', service_name],
                capture_output=True,
                text=True,
                timeout=10
            )
            return result.returncode == 0 and result.stdout.strip() == 'active'
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
            return False
    
    def restart_service(self, service_name):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ {service_name}...")
            subprocess.run(['systemctl', 'restart', service_name], check=True)
            time.sleep(5)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self.check_service_status(service_name):
                logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                logger.error(f"‚ùå –°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
            return False
    
    def check_api_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            response = requests.get(f"{self.api_url}/health", timeout=10)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
            return False
    
    def check_memory_usage(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            with open('/proc/meminfo', 'r') as f:
                lines = f.readlines()
                
            mem_info = {}
            for line in lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    mem_info[key.strip()] = int(value.split()[0])
            
            total_mb = mem_info.get('MemTotal', 0) // 1024
            available_mb = mem_info.get('MemAvailable', 0) // 1024
            used_mb = total_mb - available_mb
            usage_percent = (used_mb / total_mb) * 100 if total_mb > 0 else 0
            
            logger.info(f"üíæ –ü–∞–º—è—Ç—å: {used_mb}MB/{total_mb}MB ({usage_percent:.1f}%)")
            
            # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å > 90%, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
            if usage_percent > 90:
                logger.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏! –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞...")
                self.cleanup_memory()
                
            return usage_percent
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return 0
    
    def cleanup_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        try:
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            if self.restart_service('fsr-api'):
                logger.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏")
            
            # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ
            log_files = [
                '/root/telegram_bot/health_check.log',
                '/root/telegram_bot/system_monitor.log',
                '/root/telegram_bot/bot.log'
            ]
            
            for log_file in log_files:
                if os.path.exists(log_file):
                    size_mb = os.path.getsize(log_file) / (1024 * 1024)
                    if size_mb > 10:  # –ï—Å–ª–∏ –ª–æ–≥ –±–æ–ª—å—à–µ 10MB
                        logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ {log_file} (—Ä–∞–∑–º–µ—Ä: {size_mb:.1f}MB)")
                        with open(log_file, 'w') as f:
                            f.write(f"# –õ–æ–≥ –æ—á–∏—â–µ–Ω {datetime.now()}\n")
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    def check_database_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = [row[0] for row in cursor.fetchall()]
            
            required_tables = ['users', 'photo_uploads']
            for table in required_tables:
                if table not in tables:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ {table}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM users;")
            user_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM photo_uploads;")
            photo_count = cursor.fetchone()[0]
            
            logger.info(f"üóÑÔ∏è –ë–î: {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {photo_count} —Ñ–æ—Ç–æ")
            
            conn.close()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return False
    
    def check_disk_space(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
        try:
            result = subprocess.run(
                ['df', '-h', '/'],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                if len(lines) > 1:
                    parts = lines[1].split()
                    if len(parts) >= 5:
                        usage = parts[4]
                        usage_percent = int(usage.rstrip('%'))
                        
                        logger.info(f"üíø –î–∏—Å–∫: {usage} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
                        
                        if usage_percent > 90:
                            logger.warning("‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ!")
                            self.cleanup_disk()
                            
                        return usage_percent
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞: {e}")
            return 0
    
    def cleanup_disk(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∏—Å–∫–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            subprocess.run(['apt-get', 'autoclean'], check=True)
            subprocess.run(['apt-get', 'autoremove', '-y'], check=True)
            
            # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
            subprocess.run(['journalctl', '--vacuum-time=7d'], check=True)
            
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∏—Å–∫–∞: {e}")
    
    def check_last_restart(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª–∏ —Å–µ—Ä–≤–∏—Å—ã"""
        try:
            if os.path.exists(self.last_restart_file):
                with open(self.last_restart_file, 'r') as f:
                    last_restart = datetime.fromisoformat(f.read().strip())
                
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å
                if datetime.now() - last_restart > timedelta(hours=1):
                    return True
                else:
                    return False
            else:
                return True
        except Exception:
            return True
    
    def update_last_restart(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        try:
            with open(self.last_restart_file, 'w') as f:
                f.write(datetime.now().isoformat())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    def run_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ FSR —Å–∏—Å—Ç–µ–º—ã...")
        
        issues_found = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
        for service in self.services:
            if not self.check_service_status(service):
                logger.error(f"‚ùå –°–µ—Ä–≤–∏—Å {service} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                issues_found.append(f"–°–µ—Ä–≤–∏—Å {service} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                if self.check_last_restart():
                    if self.restart_service(service):
                        self.update_last_restart()
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å {service}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        if not self.check_api_health():
            logger.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            issues_found.append("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        if not self.check_database_integrity():
            logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
            issues_found.append("–ü—Ä–æ–±–ª–µ–º—ã —Å –ë–î")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        memory_usage = self.check_memory_usage()
        disk_usage = self.check_disk_space()
        
        if memory_usage and memory_usage > 90:
            issues_found.append("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        
        if disk_usage and disk_usage > 90:
            issues_found.append("–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if issues_found:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(issues_found)} –ø—Ä–æ–±–ª–µ–º: {', '.join(issues_found)}")
        else:
            logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return len(issues_found) == 0

def main():
    monitor = FSRSystemMonitor()
    success = monitor.run_monitoring()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main() 